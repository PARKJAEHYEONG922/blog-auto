import { LLMClientFactory, LLMMessage } from './llm-client-factory';
import { CollectedBlogData } from './data-collection-engine';

export interface BlogSelectionRequest {
  targetTitle: string;
  mainKeyword: string;
  subKeywords?: string[];
  searchKeyword: string;
  contentType: string;
  contentTypeDescription?: string;
  reviewType?: string;
  reviewTypeDescription?: string;
  blogTitles: CollectedBlogData[];
}

export interface SelectedBlogTitle {
  title: string;
  url: string;
  relevanceReason: string;
}

export interface BlogSelectionResult {
  selectedTitles: SelectedBlogTitle[];
}

export class BlogTitleSelector {
  async selectTopBlogs(request: BlogSelectionRequest): Promise<BlogSelectionResult> {
    try {
      console.log('ü§ñ Ï†ïÎ≥¥ÏöîÏïΩ AIÎ°ú ÏÉÅÏúÑ 10Í∞ú Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ ÏãúÏûë');
      
      const informationClient = LLMClientFactory.getInformationClient();
      
      // Î†àÍ±∞Ïãú ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©
      const userPrompt = this.buildLegacyPrompt(request);
      
      const messages: LLMMessage[] = [
        { role: 'user', content: userPrompt }
      ];
      
      console.log('ü§ñ [LLM ÏöîÏ≤≠] Î∏îÎ°úÍ∑∏ Ï†úÎ™© ÏÑ†Î≥Ñ ÏöîÏ≤≠');
      
      const response = await informationClient.generateText(messages);
      
      console.log('ü§ñ [LLM ÏùëÎãµ] Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ Í≤∞Í≥º Î∞õÏùå');
      
      // JSON ÏùëÎãµ ÌååÏã±
      const result = this.parseSelectionResult(response.content, request.blogTitles);
      
      console.log(`‚úÖ ÏÉÅÏúÑ ${result.selectedTitles.length}Í∞ú Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ ÏôÑÎ£å`);
      
      return result;
      
    } catch (error) {
      console.error('Î∏îÎ°úÍ∑∏ Ï†úÎ™© ÏÑ†Î≥Ñ Ïã§Ìå®:', error);
      
      // Ïò§Î•ò Ïãú ÏàúÏúÑÎåÄÎ°ú ÏÉÅÏúÑ 10Í∞ú Î∞òÌôò
      const fallbackResult: BlogSelectionResult = {
        selectedTitles: request.blogTitles.slice(0, 10).map((blog) => ({
          title: blog.title,
          url: blog.url,
          relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (AI Î∂ÑÏÑù Ïã§Ìå®)'
        }))
      };
      
      return fallbackResult;
    }
  }
  
  private buildLegacyPrompt(request: BlogSelectionRequest): string {
    // Î∏îÎ°úÍ∑∏ Ï†úÎ™©Îì§ ÌÖçÏä§Ìä∏ Íµ¨ÏÑ± (Î†àÍ±∞ÏãúÏôÄ ÎèôÏùº)
    const titlesText = request.blogTitles.map((blog, index) => 
      `${index + 1}. ${blog.title}`
    ).join('\n');
    
    // Î≥¥Ï°∞ÌÇ§ÏõåÎìú ÌÖçÏä§Ìä∏ Ï§ÄÎπÑ (Î†àÍ±∞ÏãúÏôÄ ÎèôÏùº)
    let subKeywordsText = "";
    let subKeywordsCriteria = "";
    if (request.subKeywords && request.subKeywords.length > 0) {
      const subKeywordsStr = request.subKeywords.join(', ');
      subKeywordsText = `**Î≥¥Ï°∞ ÌÇ§ÏõåÎìú**: ${subKeywordsStr}`;
      subKeywordsCriteria = `6. Î≥¥Ï°∞ ÌÇ§ÏõåÎìú(${subKeywordsStr})ÏôÄ Í¥ÄÎ†®ÏÑ±Ïù¥ ÏûàÎäî Ï†úÎ™©`;
    }
    
    // ÏΩòÌÖêÏ∏† Ïú†Ìòï ÏÑ§Î™Ö Íµ¨ÏÑ±
    let contentTypeInfo = `**ÏΩòÌÖêÏ∏† Ïú†Ìòï**: ${request.contentType}`;
    if (request.contentTypeDescription) {
      contentTypeInfo += ` (${request.contentTypeDescription})`;
    }
    
    // ÌõÑÍ∏∞ Ïú†Ìòï Ï†ïÎ≥¥ Íµ¨ÏÑ± (ÏûàÎäî Í≤ΩÏö∞)
    let reviewTypeInfo = '';
    if (request.reviewType) {
      reviewTypeInfo = `\n**ÌõÑÍ∏∞ Ïú†Ìòï**: ${request.reviewType}`;
      if (request.reviewTypeDescription) {
        reviewTypeInfo += ` (${request.reviewTypeDescription})`;
      }
    }

    return `ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏ÏóêÏÑú '${request.searchKeyword}' ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌïú Î∏îÎ°úÍ∑∏ Ï†úÎ™©Îì§ Ï§ëÏóêÏÑú, ÏïÑÎûò Ï°∞Í±¥Ïóê Í∞ÄÏû• Ï†ÅÌï©Ìïú ÏÉÅÏúÑ 10Í∞úÎ•º ÏÑ†Î≥ÑÌï¥Ï£ºÏÑ∏Ïöî.

**ÌÉÄÍ≤ü Ï†úÎ™©**: ${request.targetTitle}
**Î©îÏù∏ ÌÇ§ÏõåÎìú**: ${request.mainKeyword}
${subKeywordsText}
**Í≤ÄÏÉâ ÌÇ§ÏõåÎìú**: ${request.searchKeyword}
${contentTypeInfo}${reviewTypeInfo}

**ÏÑ†Î≥Ñ Í∏∞Ï§Ä**:
1. ÌÉÄÍ≤ü Ï†úÎ™© "${request.targetTitle}"Í≥º Í∞ÄÏû• Ï£ºÏ†úÏ†Å Í¥ÄÎ†®ÏÑ±Ïù¥ ÎÜíÏùÄ Í∏Ä (ÏµúÏö∞ÏÑ†)
2. Î©îÏù∏ ÌÇ§ÏõåÎìúÏôÄ ÏßÅÏ†ëÏ†ÅÏúºÎ°ú Ïó∞Í¥ÄÎêú ÎÇ¥Ïö©
3. ${request.contentType} Ïú†ÌòïÏóê Ï†ÅÌï©Ìïú Ï†ëÍ∑ºÎ∞©ÏãùÏùò Í∏Ä${request.reviewType ? ` (${request.reviewType} Í¥ÄÏ†ê)` : ''}
4. Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ïö©Ï†ÅÏù∏ Ï†ïÎ≥¥Î•º Îã¥Í≥† ÏûàÏùÑ Í≤ÉÏúºÎ°ú ÏòàÏÉÅÎêòÎäî Ï†úÎ™©
5. Í¥ëÍ≥†ÏÑ±Ïù¥ÎÇò ÌôçÎ≥¥ÏÑ±Î≥¥Îã§Îäî Ï†ïÎ≥¥ÏÑ± ÏΩòÌÖêÏ∏†Î°ú Î≥¥Ïù¥Îäî Ï†úÎ™©
${subKeywordsCriteria}

**Í≤ÄÏÉâÎêú Î∏îÎ°úÍ∑∏ Ï†úÎ™©Îì§**:
${titlesText}

**Ï§ëÏöî**: ÌÉÄÍ≤ü Ï†úÎ™©Í≥º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ±Ïù¥ ÎÜíÏùÄ Î∏îÎ°úÍ∑∏Î∂ÄÌÑ∞ 1ÏúÑ, 2ÏúÑ, 3ÏúÑ ÏàúÏÑúÎ°ú Ï†ïÌôïÌûà Í¥ÄÎ†®ÎèÑ ÏàúÏÑúÎåÄÎ°ú Î∞∞ÏπòÌï¥Ï£ºÏÑ∏Ïöî.

**Ï∂úÎ†• ÌòïÏãù**:
ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÎèÑÍ∞Ä Í∞ÄÏû• ÎÜíÏùÄ ÏàúÏÑúÎåÄÎ°ú ÏÉÅÏúÑ 10Í∞úÎ•º JSON ÌòïÌÉúÎ°ú ÏÑ†Î≥ÑÌï¥Ï£ºÏÑ∏Ïöî.

{
  "selected_titles": [
    {
      "title": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Ï†úÎ™© (1ÏúÑ)",
      "relevance_reason": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÏÑ± Î∞è ÏÑ†Î≥Ñ Ïù¥Ïú†"
    },
    {
      "title": "Îëê Î≤àÏß∏Î°ú Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Ï†úÎ™© (2ÏúÑ)",
      "relevance_reason": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÏÑ± Î∞è ÏÑ†Î≥Ñ Ïù¥Ïú†"
    },
    ...
    {
      "title": "Ïó¥ Î≤àÏß∏Î°ú Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Ï†úÎ™© (10ÏúÑ)",
      "relevance_reason": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÏÑ± Î∞è ÏÑ†Î≥Ñ Ïù¥Ïú†"
    }
  ]
}

Î∞òÎìúÏãú ÌÉÄÍ≤ü Ï†úÎ™© "${request.targetTitle}"Í≥ºÏùò Í¥ÄÎ†®ÎèÑÎ•º Í∏∞Ï§ÄÏúºÎ°ú 1ÏúÑÎ∂ÄÌÑ∞ 10ÏúÑÍπåÏßÄ ÏàúÏÑúÎ•º Îß§Í≤®ÏÑú Î∞òÌôòÌï¥Ï£ºÏÑ∏Ïöî.`;
  }
  
  private parseSelectionResult(content: string, originalBlogs: CollectedBlogData[]): BlogSelectionResult {
    try {
      // JSON Ï∂îÏ∂ú
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonData = JSON.parse(jsonMatch[0]);
        
        if (jsonData.selected_titles && Array.isArray(jsonData.selected_titles)) {
          console.log(`üéØ AIÍ∞Ä ÏÑ†Î≥ÑÌïú Ï†úÎ™© ${jsonData.selected_titles.length}Í∞ú Ï≤òÎ¶¨ ÏãúÏûë`);
          
          const selectedTitles: SelectedBlogTitle[] = jsonData.selected_titles.slice(0, 10).map((item: any, aiIndex: number) => {
            console.log(`\nüîç [${aiIndex + 1}] AI ÏÑ†Î≥Ñ Ï†úÎ™©: "${item.title}"`);
            
            // Ï†úÎ™©ÏúºÎ°ú ÏõêÎ≥∏ Î∏îÎ°úÍ∑∏ Ï∞æÍ∏∞ (Ï†ïÌôï Îß§Ïπ≠ + Î∂ÄÎ∂Ñ Îß§Ïπ≠)
            let originalBlog = originalBlogs.find(blog => blog.title === item.title);
            console.log(`   Ï†ïÌôï Îß§Ïπ≠: ${originalBlog ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
            
            // Ï†ïÌôï Îß§Ïπ≠ Ïã§Ìå® Ïãú Î∂ÄÎ∂Ñ Îß§Ïπ≠ ÏãúÎèÑ
            if (!originalBlog) {
              originalBlog = originalBlogs.find(blog => 
                blog.title.includes(item.title) || item.title.includes(blog.title)
              );
              console.log(`   Î∂ÄÎ∂Ñ Îß§Ïπ≠: ${originalBlog ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
            }
            
            // Ïó¨Ï†ÑÌûà Îß§Ïπ≠ Ïã§Ìå® Ïãú Ïù∏Îç±Ïä§ Í∏∞Î∞ò Îß§Ïπ≠ (ÏàúÏÑúÎåÄÎ°ú)
            if (!originalBlog && originalBlogs.length > 0) {
              const index = Math.min(originalBlogs.length - 1, aiIndex);
              originalBlog = originalBlogs[index];
              console.log(`   Ïù∏Îç±Ïä§ Îß§Ïπ≠: ${index}Î≤àÏß∏ Î∏îÎ°úÍ∑∏ ÏÇ¨Ïö©`);
            }
            
            const url = originalBlog?.url || '';
            console.log(`   Îß§Ïπ≠Îêú ÏõêÎ≥∏: "${originalBlog?.title || 'N/A'}"`);
            console.log(`   Ï∂îÏ∂úÎêú URL: "${url}" (ÌÉÄÏûÖ: ${typeof url}, Í∏∏Ïù¥: ${url?.length || 0})`);
            console.log(`   URL Ïú†Ìö®ÏÑ±: ${url && url.includes('blog.naver.com')}`);
            
            if (!url) {
              console.error(`‚ùå [${aiIndex + 1}] URLÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: "${item.title}"`);
            }
            
            return {
              title: item.title,
              url: url,
              relevanceReason: item.relevance_reason || 'ÏÑ†Î≥ÑÎê®'
            };
          }).filter((blog: SelectedBlogTitle) => {
            const hasUrl = !!blog.url;
            if (!hasUrl) {
              console.warn(`‚ö†Ô∏è URLÏù¥ ÏóÜÏñ¥ Ï†úÏô∏Îê®: "${blog.title}"`);
            }
            return hasUrl;
          }); // URLÏù¥ ÏûàÎäî Í≤ÉÎßå ÌïÑÌÑ∞ÎßÅ
          
          console.log(`‚úÖ ÏµúÏ¢Ö ÏÑ†Î≥ÑÎêú Î∏îÎ°úÍ∑∏: ${selectedTitles.length}Í∞ú (URL Ïú†Ìö®)`);
          selectedTitles.forEach((blog, index) => {
            console.log(`   ${index + 1}. "${blog.title}" - ${blog.url}`);
          });
          
          return { selectedTitles };
        }
      }
    } catch (error) {
      console.warn('Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ Í≤∞Í≥º JSON ÌååÏã± Ïã§Ìå®:', error);
    }
    
    // ÌååÏã± Ïã§Ìå® Ïãú ÏÉÅÏúÑ 10Í∞ú Î∞òÌôò
    return {
      selectedTitles: originalBlogs.slice(0, 10).map((blog) => ({
        title: blog.title,
        url: blog.url,
        relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (ÌååÏã± Ïã§Ìå®)'
      }))
    };
  }
}